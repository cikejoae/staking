{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","account","contract","vaultcontract","web3","Web3Alc","web3Modal","Web3Modal","network","theme","cacheProvider","providerOptions","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","headers","outputb","result","nftdata","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","Promise","resolve","setTimeout","connect","provider","Web3","request","method","eth","requestAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","toPrecision","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","setApprovalForAll","send","rawnfts","getMaxPriorityFeePerGas","tip","getBlock","block","baseFee","baseFeePerGas","maxPriority","maxFee","claim","maxFeePerGas","maxPriorityFeePerGas","unstake","className","src","width","height","alt","href","rel","type","onClick","style","class","fontWeight","color","fontFamily","textShadow","htmlFor","borderRadius","fontSize","Button","backgroundColor","boxShadow","paddingTop","background","marginTop","scope","window","location","reload","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapikey","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","useEffect","callApi","output","nfts","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","length","display","gridColumnEnd","gridTemplateColumns","columnGap","nft","owner","toLowerCase","indexOf","stakeit","stake","marginLeft","position","top","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b03686eb.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\nexport const NFTCONTRACT = \"0xA690c89558a39709e1F0DdE0f8825a83d438fcE4\";\nexport const STAKINGCONTRACT = \"0x32a92e12D1782B620899e9881EECbA8FdBc5d569\";\nexport const polygonscanapi = \"https://api.polygonscan.com/api\";\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2\";\nexport const nftpng = \"https://ipfs.io/ipfs/QmZnG7o3UTe35xq3ffJMtApKXnY2d2Ccxwjxny3HPvop1S/\";\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/es1OESDzahjFzl7I2jMj9F24Ea3vMo3u\");\n\n\n\n// export const polygonscanapi = \"https://api.polygonscan.com/api\";","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\nimport TOKENABI from './TOKENABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-mainnet.g.alchemy.com/v2/W3CAcUSVv-z7zxqoiF3coq_6wUAXcsl8\");\n\nconst moralisapikey = \"rmo6dN3ukVlyFvERnzAQkjxYW3DQUO4dZIkLgQKvPKdCZ8ZQ3gAzdcnhbT3L5WGI\";\nconst polygonscanapikey = \"JAR6HQQDTVZ3UQIHCUFHJ7MV2M5E6V2FFE\";\n\nconst providerOptions = {\n  // binancechainwallet: {\n  //   package: true\n  // },\n  // walletconnect: {\n  //   package: WalletConnectProvider,\n  //   options: {\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\"\n  //   }\n  // },\n  // walletlink: {\n  //   package: WalletLink,\n  //   options: {\n  //     appName: \"OSIS Staking dAPP\",\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\",\n  //     rpc: \"https://polygon-mainnet.public.blastapi.io\",\n  //     chainId: 137,\n  //     appLogoUrl: null,\n  //     darkMode: true\n  //   }\n  // },s\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\",\n  theme: \"dark\",\n  cacheProvider: false,\n  providerOptions\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      balance: [],\n      rawearn: [],\n    };\n  }\n\n  handleModal() {\n    this.setState({ show: !this.state.show })\n  }\n\n  handleNFT(nftamount) {\n    this.setState({ outvalue: nftamount.target.value });\n  }\n\n  async componentDidMount() {\n\n    await axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n      .then(outputa => {\n        this.setState({\n          balance: outputa.data\n        })\n        console.log(outputa.data)\n      })\n    let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n    await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n      .then(outputb => {\n        const { result } = outputb.data\n        this.setState({\n          nftdata: result\n        })\n        console.log(outputb.data)\n      })\n  }\n\n\n  render() {\n    const { balance } = this.state;\n    const { nftdata } = this.state;\n    const { outvalue } = this.state;\n\n    const sleep = (milliseconds) => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n    const expectedBlockTime = 100000;\n\n    async function connectwallet() {\n      var provider = await web3Modal.connect();\n      web3 = new Web3(provider);\n      await provider.request({ method: 'eth_requestAccounts' });\n      var accounts = await web3.eth.requestAccounts();\n      account = accounts[0];\n      document.getElementById('wallet-address').textContent = account;\n      contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n      vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      const arraynft = Array.from(getstakednfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        console.log(array);\n        array.forEach(async (item) => {\n          var earned = item.toPrecision(22).split('.')[0]\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          console.log(numrwd);\n          rwdArray.push(numrwd);\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n\n    async function verify() {\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      console.log(getstakednfts);\n    }\n\n    async function enable() {\n      contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n    }\n    async function rewardinfo() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        array.forEach(async (item) => {\n          var earned = item.toPrecision(22).split('.')[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          rwdArray.push(numrwd)\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n    async function claimit() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.claim([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function unstakeall() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.unstake([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function mintnative() {\n      var _mintAmount = Number(outvalue);\n      var mintRate = Number(await contract.methods.cost().call());\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = baseFee + maxPriority\n          contract.methods.mint(account, _mintAmount)\n            .send({\n              from: account,\n              value: String(totalAmount),\n              maxFeePerGas: maxFee,\n              maxPriorityFeePerGas: maxPriority\n            });\n        });\n      })\n    }\n\n    async function mint0() {\n      var _pid = \"0\";\n      var erc20address = await contract.methods.getCryptotoken(_pid).call();\n      var currency = new web3.eth.Contract(TOKENABI, erc20address);\n      var mintRate = await contract.methods.getNFTCost(_pid).call();\n      var _mintAmount = Number(outvalue);\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          currency.methods.approve(NFTCONTRACT, String(totalAmount))\n            .send({\n              from: account\n            })\n            .then(currency.methods.transfer(NFTCONTRACT, String(totalAmount))\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              },\n                async function (error, transactionHash) {\n                  console.log(\"Transfer Submitted, Hash: \", transactionHash)\n                  let transactionReceipt = null\n                  while (transactionReceipt == null) {\n                    transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash);\n                    await sleep(expectedBlockTime)\n                  }\n                  window.console = {\n                    log: function (str) {\n                      var out = document.createElement(\"div\");\n                      out.appendChild(document.createTextNode(str));\n                      document.getElementById(\"txout\").appendChild(out);\n                    }\n                  }\n                  console.log(\"Transfer Complete\", transactionReceipt);\n                  contract.methods.mintpid(account, _mintAmount, _pid)\n                    .send({\n                      from: account,\n                      maxFeePerGas: maxFee,\n                      maxPriorityFeePerGas: maxPriority\n                    });\n                }));\n        });\n      });\n    }\n    const refreshPage = () => {\n      window.location.reload();\n    }\n\n    return (\n      <div className=\"container py-2 bg-black\">\n        <div className=\"App nftapp bg-black\">\n\n          <nav className=\"container py-3 bg-black\">\n            <div className=\"container d-flex align-content-center flex-wrap bg-black\"> <img src=\"apotheosis.png\" width=\"\" height=\"38\" className=\"d-inline-block align-top\" alt=\"\"></img>\n              <ul className=\"nav me-auto align-content-right bg-black\">\n                <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\".\" className=\"nav-link link-light px-2 active\" aria-current=\"page\">Dashboard</a></li>\n                <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#Vault\" className=\"nav-link link-light px-2\">Vault</a></li>\n                <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#NFT\" className=\"nav-link link-light px-2\">NFTs</a></li>\n                <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world\" target=\"_blank\" rel=\"noreferrer\" className=\"nav-link link-light px-2\">OSIS</a></li>\n              </ul>\n              <ul className=\"nav\">\n                <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\" className=\"nav-link link-light px-3\">GET OSIS</a></li>\n                <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{ class: \"nav-item d-flex align-content-center flex-wrap\" }} value=\"Connect Your Wallet\" />\n                {/* <li className=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\" className=\"nav-link link-light px-3\">GET OSIS</a></li> */}\n              </ul>\n            </div>\n          </nav>\n          <div className='container, bg-black'>\n            <div className='col, py-4'>\n              <div className='nftminter'>\n                <div>\n                  <div className=\"row pt-1\">\n                    <div>\n                      <h1 className=\"pt-1\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>MetaBadge Staking Platform</h1>\n                    </div>\n                    <h3>{balance.result} Minted /10000</h3>\n                    <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>Your Wallet Address</h6>\n                    <div className=\"pb-1\" id='wallet-address' style={{\n                      color: \"#4ac0e7\",\n                      fontWeight: \"600\",\n                      textShadow: \"1px 1px 1px black\",\n                    }}>\n                      <label htmlFor=\"floatingInput\">Please Connect Your Wallet</label>\n                    </div>\n                  </div>\n                  <div>\n                    {/* <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>Select NFT Quantity</label> */}\n                  </div>\n                  {/* <ButtonGroup size=\"lg\"\n                    aria-label=\"First group\"\n                    name=\"amount\"\n                    style={{ boxShadow: \"1px 1px 5px #4ac0e7\" }}\n                    onClick={nftamount => this.handleNFT(nftamount, \"value\")}\n                  >\n                    <Button value=\"1\">1</Button>\n                    <Button value=\"2\">2</Button>\n                    <Button value=\"3\">3</Button>\n                    <Button value=\"4\">4</Button>\n                    <Button value=\"5\">5</Button>\n                  </ButtonGroup> */}\n                  {/* <h6 className=\"pt-2\" style={{ fontFamily: \"SF Pro Display\", fontWeight: \"300\", fontSize: \"18px\" }}>Buy with your preferred crypto!</h6> */}\n                  {/* <div className=\"row px-2 pb-2 row-style\"> */}\n                  {/* <div className=\"col \"> */}\n                  {/* <Button className=\"button-style\" onClick={mint0} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src={\"n2dr-logo.png\"} width=\"100%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"usdt.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" onClick={mintnative} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"matic.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div> */}\n                  {/* <div id='txout' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '20px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>\n                        <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\n                      </div> */}\n                  {/* </div> */}\n                  {/* </div> */}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='col bg-black'>\n            <div className='nftstaker border-0 bg-black'>\n              <div style={{ fontFamily: \"Avenir LT Std\" }} >\n                <h2 className=\"pt-2\" style={{ fontFamily: \"Avenir LT Std\", borderRadius: '14px', fontWeight: \"400\", color: \"#ffffff\", fontSize: \"25px\" }} id=\"Vault\">MetaBadge Staking Vault </h2>\n                <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>First time staking?</h6>\n                <Button className=\"btn\" onClick={enable} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Authorize Your Wallet</Button>\n                <div className=\"row mt-2 px-3 pt-1\">\n                  <div className=\"col-sm-4 col-center-block\">\n                    <div className=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300', paddingTop: 15 }}>Your Vault Activity</h5>\n                      <h5 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h5>\n                      <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Verify</Button>\n                      <table className='table mt-3 mb-5 px-3 table-dark'>\n                        <tbody>\n                          <tr>\n                            <td style={{ fontSize: \"19px\", background: 'transparent' }}>Your Staked NFTs:\n                              <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style={{ fontSize: \"19px\", background: 'transparent' }}>Total Staked NFTs:\n                              <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'></span>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style={{ fontSize: \"19px\", background: 'transparent' }}>Unstake All Staked NFTs<br></br>\n                              <Button onClick={unstakeall} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className='mb-3' >Unstake All</Button>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <img className=\"col-sm-3 col-center-block mb-5 mb-1\" src=\"metabadges.png\" />\n                  <div className=\"col-sm-4 col-center-block\">\n                    <div className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\", fontFamily: \"Avenir LT Std\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300', paddingTop: 15 }}>Your Rewards Activity</h5>\n                      <h5 className=\"\" style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards</h5>\n                      <Button onClick={rewardinfo} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Earned OSIS Rewards</Button>\n                      <div id='earned' style={{ color: \"#6db647\", marginTop: \"10px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p style={{ fontSize: \"20px\" }}>Earned Tokens</p></div>\n                      <div className='col12 mt-2'>\n                        <div className=\"pt-2\" style={{ color: 'white' }}>Claim Rewards</div>\n                        <div>\n                          <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                        </div>\n                        <Button onClick={claimit} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className=\"mb-4\">Claim</Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row px-4 pt-2\">\n                  <div className=\"header\">\n                    <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: \"300\" }}>OSIS NFT Staking Pool Active Rewards</div>\n                    <h1>\n                    </h1>\n                    <table style={{ boxShadow: \"1px 1px 15px #4ac0e7\" }} className='table px-3 table-bordered table-dark' >\n                      <thead className='thead-light'>\n                        <tr>\n                          <th scope=\"col\">Collection</th>\n                          <th scope=\"col\">Rewards Per Day</th>\n                          {/* <th scope=\"col\">Exchangeable Items</th> */}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Standard MetaBadge</td>\n                          <td className=\"amount\" data-test-id=\"rewards-summary-ads\">\n                            <span className=\"amount\">1</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td>\n                          {/* <td className=\"exchange\">\n                            <span className=\"amount\">2</span>&nbsp;<span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                        <tr>\n                          <td>Rare MetaBadge</td>\n                          <td className=\"amount\" data-test-id=\"rewards-summary-ac\">\n                            <span className=\"amount\">2</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td>\n                          {/* <td className=\"exchange\"><span className=\"amount\">10</span>&nbsp;<span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                        <tr className='stakegoldeffect'>\n                          <td>Super Rare MetaBadge</td>\n                          <td className=\"amount\" data-test-id=\"rewards-summary-one-time\"><span className=\"amount\">2</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td>\n                          {/* <td className=\"exchange\">\n                            <span className=\"amount\">TBD or </span>\n                            <span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                      </tbody>\n                    </table>\n                    {/* <div className=\"header\"> */}\n                    {/* <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: '300' }}>OSIS Token Stake Farms</div> */}\n                    {/* <h1> */}\n                    {/* </h1> */}\n                    {/* <table className='table table-bordered table-dark' style={{ borderRadius: '14px', boxShadow: \"1px 1px 15px #4ac0e7\" }} > */}\n                    {/* <thead className='thead-light'> */}\n                    {/* <tr> */}\n                    {/* <td>OSIS Staking Farm Pools</td> */}\n                    {/* <td>Harvest Daily Earnings</td> */}\n                    {/* </tr> */}\n                    {/* </thead> */}\n                    {/* <tbody> */}\n                    {/* <tr> */}\n                    {/* <td>Stake OSIS to Earn OSIS</td> */}\n                    {/* <td className=\"amount\" data-test-id=\"rewards-summary-ads\"> */}\n                    {/* <span className=\"amount\">0.001</span>&nbsp;<span className=\"currency\">Per Staked OSIS</span> */}\n                    {/* </td> */}\n                    {/* </tr> */}\n                    {/* <tr>\n                            <td>Stake OSIS to Earn OSIS+</td>\n                            <td className=\"amount\" data-test-id=\"rewards-summary-ac\">\n                              <span className=\"amount\">0.005</span>&nbsp;<span className=\"currency\">Per OSIS</span>\n                            </td>\n                          </tr> */}\n                    {/* </tbody> */}\n                    {/* </table> */}\n                    {/* </div> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='col mt-3 bg-black' id=\"NFT\">\n            <div className='col mt-3 ml-3 bg-black'>\n              <img src=\"polygon.png\" width={'20%'}></img>\n            </div>\n            <div className='col bg-black'>\n              <h1 className='n2dtitlestyle mb-3 mt-3 bg-black'>Your NFT Portal</h1>\n              <Button onClick={refreshPage} style={{ backgroundColor: \"#000000\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>Refresh NFT Portal</Button>\n            </div>\n            <div className='col mt-3 mr-5 bg-black'>\n              {/* <img src=\"./ethereum.png\" width={'20%'}></img> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react'\nimport 'sf-font';\nimport axios from 'axios';\nimport VAULTABI from './VAULTABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\n// import WalletConnectProvider from \"@walletconnect/web3-provider\";\n// import WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\n\nvar web3 = null;\nvar account = null;\nvar vaultcontract = null;\nvar provider = null;\n\nconst moralisapikey = \"rmo6dN3ukVlyFvERnzAQkjxYW3DQUO4dZIkLgQKvPKdCZ8ZQ3gAzdcnhbT3L5WGI\";\nconst providerOptions = {\n    // binancechainwallet: {\n    //     package: true\n    // },\n    // walletconnect: {\n    //     package: WalletConnectProvider,\n    //     options: {\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //     },\n    // },\n    // walletlink: {\n    //     package: WalletLink,\n    //     options: {\n    //         appName: \"OSIS Staking dAPP\",\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //         rpc: \"https://polygon-mainnet.public.blastapi.io\",\n    //         chainId: 137,\n    //         appLogoUrl: null,\n    //         darkMode: true\n    //     }\n    // },\n};\n\nconst web3Modal = new Web3Modal({\n    network: \"mainnet\",\n    theme: \"dark\",\n    cacheProvider: false,\n    providerOptions\n});\n\nexport default function NFT() {\n    const [apicall, getNfts] = useState([])\n    const [nftstk, getStk] = useState([])\n    const [loadingState, setLoadingState] = useState('not-loaded')\n\n    useEffect(() => {\n        callApi()\n    }, []);\n\n    const switchNetwork = async (chainId) => {\n        if (![137, '0x89', '137'].includes(chainId)) {\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: '0x89' }],\n                });\n                await callApi();\n                return { msg: 'Change Network Successfull' };\n            } catch (e) {\n               console.log('error switchNetwork', e);\n            }\n        }\n    }\n\n    async function callApi() {\n        provider = await web3Modal.connect();\n        // provider.on('chainChanged', switchNetwork);\n        web3 = new Web3(provider);\n        await provider.request({ method: 'eth_requestAccounts' });\n        var accounts = await web3.eth.requestAccounts();\n        account = accounts[0];\n        // switchNetwork(provider.chainId);\n        vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT)\n        let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n        const nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n            .then(output => {\n                const { result } = output.data\n                return result;\n            })\n        const apicall = await Promise.all(nfts.map(async i => {\n            let item = {\n                tokenId: i.token_id,\n                holder: i.owner_of,\n                wallet: account,\n            }\n            return item\n        }))\n        const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\n            .then(id => {\n                return id;\n            })\n        const nftstk = await Promise.all(stakednfts.map(async i => {\n            let stkid = {\n                tokenId: i,\n            }\n            return stkid\n        }))\n        getNfts(apicall)\n        getStk(nftstk)\n        console.log(apicall);\n        console.log(nftstk)\n        setLoadingState('loaded')\n    }\n    console.log('check', { loadingState, apicall, nftstk });\n    if (loadingState === 'loaded' && !apicall.length) {\n        return (<h1 className=\"text-3xl\">Wallet Not Connected</h1>)\n    }\n    return (\n        <div className='container mb-4 bg-black'>\n            <div className=\"container nftportal bg-black\">\n                <div className=\"row items px-5 pt-1\">\n                    <div className=\"ml-3 mr-3 bg-black\" style={{ display: \"inline-grid\", gridColumnEnd: \"auto\", gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\", columnGap: \"10px\" }}>\n                        {apicall.map((nft, i) => {\n                            const owner = nft.wallet.toLowerCase();\n                            const holder = nft.holder.toLowerCase();\n                            if (owner.indexOf(holder) !== -1) {\n                                async function stakeit() {\n                                    vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\n                                }\n                                return (\n                                    <div className=\"card nft-card mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges<br></br> #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#6db647\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        })}\n                        {nftstk.map((nft, i) => {\n                            async function unstakeit() {\n                                vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\n                            }\n                            return (\n                                <div key={i}>\n                                    <div className=\"card stakedcard mt-3 mb-3\" >\n                                        <div className=\"image-over\">\n                                            <img style={{ position: 'absolute', top: '0.05rem', width: '50px' }} src='metabadges.png'></img>\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges<br></br> #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit}>Unstake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}