{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","account","contract","vaultcontract","web3","gasOptions","gasPrice","gasLimit","Web3Alc","sleep","ms","Promise","resolve","setTimeout","web3Modal","Web3Modal","network","theme","cacheProvider","providerOptions","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","headers","outputb","result","nftdata","connectwallet","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","connect","provider","Web3","request","method","eth","requestAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","toPrecision","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","setApprovalForAll","send","rawnfts","getMaxPriorityFeePerGas","tip","getBlock","block","claim","unstake","className","src","width","height","alt","type","href","rel","onClick","style","backgroundColor","fontWeight","color","fontFamily","textShadow","htmlFor","borderRadius","fontSize","Button","boxShadow","paddingTop","border","background","paddingBottom","scope","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapikey","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","stakeLoading","setStakeLoading","unstakeLoading","setUnstakeLoading","useEffect","callApi","switchNetwork","chainId","includes","params","msg","getNextNftPage","cursor","on","nftsRes","nfts","numLoop","Math","floor","total","page_size","x","nextPageRes","e","length","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","display","gridColumnEnd","gridTemplateColumns","columnGap","nft","owner","toLowerCase","indexOf","stakeit","stake","marginLeft","position","top","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.62d48d3a.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\nexport const NFTCONTRACT = \"0xA690c89558a39709e1F0DdE0f8825a83d438fcE4\";\nexport const STAKINGCONTRACT = \"0x7f6059DdF112CBD103c7F2Fd2ed0F0adb2E2AE8c\";\nexport const polygonscanapi = \"https://api.polygonscan.com/api\";\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2\";\nexport const nftpng = \"https://ipfs.io/ipfs/QmZnG7o3UTe35xq3ffJMtApKXnY2d2Ccxwjxny3HPvop1S/\";\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/es1OESDzahjFzl7I2jMj9F24Ea3vMo3u\");\n\n\n\n// export const polygonscanapi = \"https://api.polygonscan.com/api\";","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\n// import TOKENABI from './TOKENABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi } from './config';\nimport Web3Modal from \"web3modal\";\n// import WalletConnectProvider from '@walletconnect/web3-provider';\n// import WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\nconst gasOptions = { gasPrice: 150000000000, gasLimit: 500000 };\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-mainnet.g.alchemy.com/v2/W3CAcUSVv-z7zxqoiF3coq_6wUAXcsl8\");\n\nconst moralisapikey = \"JwcyI3kFcZIx9M9Psom0b0d2ahdb9VxmSs80MnYU43bbwX803Jufh0XzqYKbXzyg\";\nconst polygonscanapikey = \"JAR6HQQDTVZ3UQIHCUFHJ7MV2M5E6V2FFE\";\n\nconst providerOptions = {\n  // binancechainwallet: {\n  //   package: true\n  // },\n  // walletconnect: {\n  //   package: WalletConnectProvider,\n  //   options: {\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\"\n  //   }\n  // },\n  // walletlink: {\n  //   package: WalletLink,\n  //   options: {\n  //     appName: \"OSIS Staking dAPP\",\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\",\n  //     rpc: \"https://polygon-mainnet.public.blastapi.io\",\n  //     chainId: 137,\n  //     appLogoUrl: null,\n  //     darkMode: true\n  //   }\n  // },s\n};\n\nfunction sleep(ms) {return new Promise((resolve) => setTimeout(resolve, ms));}\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\",\n  theme: \"dark\",\n  cacheProvider: false,\n  providerOptions\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      balance: [],\n      rawearn: [],\n    };\n  }\n\n  handleModal() {\n    this.setState({ show: !this.state.show })\n  }\n\n  handleNFT(nftamount) {\n    this.setState({ outvalue: nftamount.target.value });\n  }\n\n  async componentDidMount() {\n\n    await axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n      .then(outputa => {\n        this.setState({\n          balance: outputa.data\n        })\n        console.log(outputa.data)\n      })\n    let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n    await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n      .then(outputb => {\n        const { result } = outputb.data\n        this.setState({\n          nftdata: result\n        })\n        console.log(outputb.data)\n      })\n  }\n\n  render() {\n    // const { balance } = this.state;\n    // const { outvalue } = this.state;\n\n    // const sleep = (milliseconds) => {\n    //   return new Promise(resolve => setTimeout(resolve, milliseconds))\n    // }\n    // const expectedBlockTime = 10000;\n\n    async function connectwallet() {\n      var provider = await web3Modal.connect();\n      web3 = new Web3(provider);\n      await provider.request({ method: 'eth_requestAccounts' });\n      var accounts = await web3.eth.requestAccounts();\n      account = accounts[0];\n      document.getElementById('wallet-address').textContent = account;\n      contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n      vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      const arraynft = Array.from(getstakednfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        console.log(array);\n        array.forEach(async (item) => {\n          var earned = item.toPrecision(22).split('.')[0]\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          console.log(numrwd);\n          rwdArray.push(numrwd);\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n\n\n    // async function verify() {\n    //   var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    //   document.getElementById('yournfts').textContent = getstakednfts;\n    //   var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n    //   document.getElementById('stakedbalance').textContent = getbalance;\n    //   console.log(getstakednfts);\n    // }\n\n    async function enable() {\n      contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n    }\n    async function rewardinfo() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        array.forEach(async (item) => {\n          var earned = item.toPrecision(22).split('.')[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          rwdArray.push(numrwd)\n          await sleep(100);\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n    async function claimit() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          // var baseFee = Number(block.baseFeePerGas);\n          // var maxPriority = Number(tip);\n          // var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.claim([id])\n              .send({\n                from: account, ...gasOptions,\n              })\n          })\n        });\n      })\n    }\n    async function unstakeall() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          // var baseFee = Number(block.baseFeePerGas);\n          // var maxPriority = Number(tip);\n          // var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.unstake([id])\n              .send({\n                from: account, ...gasOptions,\n              })\n          })\n        });\n      })\n    }\n    // async function mintnative() {\n    //   var _mintAmount = Number(outvalue);\n    //   var mintRate = Number(await contract.methods.cost().call());\n    //   var totalAmount = mintRate * _mintAmount;\n    //   await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n    //     Web3Alc.eth.getBlock('pending').then((block) => {\n    //       var baseFee = Number(block.baseFeePerGas);\n    //       var maxPriority = Number(tip);\n    //       var maxFee = baseFee + maxPriority\n    //       contract.methods.mint(account, _mintAmount)\n    //         .send({\n    //           from: account,\n    //           value: String(totalAmount),\n    //           maxFeePerGas: maxFee,\n    //           maxPriorityFeePerGas: maxPriority\n    //         });\n    //     });\n    //   })\n    // }\n\n    // async function mint0() {\n    //   var _pid = \"0\";\n    //   var erc20address = await contract.methods.getCryptotoken(_pid).call();\n    //   var currency = new web3.eth.Contract(TOKENABI, erc20address);\n    //   var mintRate = await contract.methods.getNFTCost(_pid).call();\n    //   var _mintAmount = Number(outvalue);\n    //   var totalAmount = mintRate * _mintAmount;\n    //   await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n    //     Web3Alc.eth.getBlock('pending').then((block) => {\n    //       var baseFee = Number(block.baseFeePerGas);\n    //       var maxPriority = Number(tip);\n    //       var maxFee = maxPriority + baseFee;\n    //       currency.methods.approve(NFTCONTRACT, String(totalAmount))\n    //         .send({\n    //           from: account\n    //         })\n    //         .then(currency.methods.transfer(NFTCONTRACT, String(totalAmount))\n    //           .send({\n    //             from: account,\n    //             maxFeePerGas: maxFee,\n    //             maxPriorityFeePerGas: maxPriority\n    //           },\n    //             async function (error, transactionHash) {\n    //               console.log(\"Transfer Submitted, Hash: \", transactionHash)\n    //               let transactionReceipt = null\n    //               while (transactionReceipt == null) {\n    //                 transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash);\n    //                 await sleep(expectedBlockTime)\n    //               }\n    //               window.console = {\n    //                 log: function (str) {\n    //                   var out = document.createElement(\"div\");\n    //                   out.appendChild(document.createTextNode(str));\n    //                   document.getElementById(\"txout\").appendChild(out);\n    //                 }\n    //               }\n    //               console.log(\"Transfer Complete\", transactionReceipt);\n    //               contract.methods.mintpid(account, _mintAmount, _pid)\n    //                 .send({\n    //                   from: account,\n    //                   maxFeePerGas: maxFee,\n    //                   maxPriorityFeePerGas: maxPriority\n    //                 });\n    //             }));\n    //     });\n    //   });\n    // }\n\n\n\n    // const refreshPage = () => {\n    //   window.location.reload();\n    // }\n\n    return (\n      <div className=\"container py-2 bg-black\">\n        <div className=\"App nftapp bg-black\">\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-black\">\n            <div className=\"container-fluid\">\n              <div> <img src=\"apotheosis.png\" width=\"\" height=\"38\" alt=\"\"></img></div>\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span></button>\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav ml-auto\">\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\".\">Dashboard</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#Vault\">Vault</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#NFT\">NFTs</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"https://osis.world\" target=\"_blank\" rel=\"noreferrer\">OSIS</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\">GET OSIS</a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"container navbar-nav justify-content-md-end\">\n            <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{ backgroundColor: \"#26A7DF\", className: \"nav-item d-flex align-content-center flex-wrap\" }} value=\"Connect Your Wallet\" />\n            </div>\n          </nav>\n          <div className='container, bg-black'>\n            <div className='col, py-4'>\n              <div className=''>\n                {/* <div className='nftminter'> */}\n                <div>\n                  <div className=\"row\">\n                    <div>\n                      <h1 className=\"pt-3\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>MetaBadge Staking Platform</h1>\n                    </div>\n                    {/* <h3>{balance.result} Minted /10000</h3> */}\n                    <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>Your Wallet Address</h6>\n                    <div className=\"pb-1\" id='wallet-address' style={{\n                      color: \"#4ac0e7\",\n                      fontWeight: \"600\",\n                      textShadow: \"1px 1px 1px black\",\n                    }}>\n                      <label type=\"button\" onClick={connectwallet} htmlFor=\"floatingInput\">Please Connect Your Wallet</label>\n                    </div>\n                  </div>\n                  <div>\n                    {/* <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>Select NFT Quantity</label> */}\n                  </div>\n                  {/* <ButtonGroup size=\"lg\"\n                    aria-label=\"First group\"\n                    name=\"amount\"\n                    style={{ boxShadow: \"1px 1px 5px #4ac0e7\" }}\n                    onClick={nftamount => this.handleNFT(nftamount, \"value\")}\n                  >\n                    <Button value=\"1\">1</Button>\n                    <Button value=\"2\">2</Button>\n                    <Button value=\"3\">3</Button>\n                    <Button value=\"4\">4</Button>\n                    <Button value=\"5\">5</Button>\n                  </ButtonGroup> */}\n                  {/* <h6 className=\"pt-2\" style={{ fontFamily: \"SF Pro Display\", fontWeight: \"300\", fontSize: \"18px\" }}>Buy with your preferred crypto!</h6> */}\n                  {/* <div className=\"row px-2 pb-2 row-style\"> */}\n                  {/* <div className=\"col \"> */}\n                  {/* <Button className=\"button-style\" onClick={mint0} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src={\"n2dr-logo.png\"} width=\"100%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"usdt.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" onClick={mintnative} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"matic.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div> */}\n                  {/* <div id='txout' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '20px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>\n                        <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\n                      </div> */}\n                  {/* </div> */}\n                  {/* </div> */}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='col bg-black'>\n            <div className='nftstaker border-0 bg-black'>\n              <div style={{ fontFamily: \"Avenir LT Std\" }} >\n                <h2 className=\"pt-2\" style={{ fontFamily: \"Avenir LT Std\", borderRadius: '14px', fontWeight: \"400\", color: \"#ffffff\", fontSize: \"25px\" }} id=\"Vault\">MetaBadge Staking Vault </h2>\n                <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>First time staking?</h6>\n                <Button className=\"btn\" onClick={enable} style={{ backgroundColor: \"#26A7DF\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Authorize Your Wallet</Button>\n                <div className=\"row mt-2 px-3 pt-1\">\n                  <div className=\"col-sm-4 col-center-block\">\n                    <div className=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontSize: \"15px\", fontWeight: '300', paddingTop: 15 }}>Vault Activity</h5>\n                      {/* <h5 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h5> */}\n                      {/* <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Verify</Button> */}\n                      <table className='table mb-5 px-3 table-dark wrap-nft'>\n                        <tbody>\n                          <tr>\n                            <td style={{ fontSize: \"0px\", border: \"transparent\", background: 'transparent', paddingTop: 1, paddingBottom: 1 }}>\n                              <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"0px\", color: \"#D53790\", fontWeight: \"0\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style={{ fontSize: \"19px\", border: \"transparent\", background: 'transparent', paddingTop: 1, paddingBottom: 1 }}>Total Staked NFTs:<br></br>\n                              <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#D53790\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'>Total Staked</span>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style={{ fontSize: \"19px\", background: 'transparent' }}>\n                              <Button onClick={unstakeall} style={{ backgroundColor: \"#D53790\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className='mb-4' >Unstake All</Button>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <img className=\"img-fluid col-sm-3 col-center-block mb-5 mb-1\" src=\"metabadges.png\" width=\"\" height=\"\" alt=\"Responsive\" />\n                  <div className=\"col-sm-4 col-center-block\">\n                    <div className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\", fontFamily: \"Avenir LT Std\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontSize: \"15px\", fontWeight: '300', paddingTop: 15 }}>Rewards Activity</h5>\n\n                      {/* <h5 className=\"\" style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards</h5> */}\n                      {/* <a onClick=\"rewardinfo\" className=\"\"> <img src=\"metabadges.png\" width=\"\" height=\"38\" className=\"d-inline-block align-top\" alt=\"\"></img>\n                      <Button onClick={rewardinfo}></Button></a> */}\n\n                      <div style={{ border: \"transparent\", background: \"transparent\" }} >Refresh OSIS Rewards\n                        <button style={{ border: \"none\", background: \"transparent\" }} >\n                          <img src=\"refresh.png\" width=\"\" height=\"15\" background=\"transparent\" border=\"transparent\" alt=\"\" onClick={rewardinfo} />\n                        </button>\n                      </div>\n                      <div id='earned' style={{ color: \"#D53790\", fontSize: '21px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p >Earned Tokens</p>\n                      </div>\n                      <div>\n                        {/* <div className=\"\" style={{ color: 'white', fontSize: '19px' }}>Claim Rewards</div> */}\n                        <Button onClick={claimit} style={{ backgroundColor: \"#D53790\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className=\"mb-4 mt-1\">Claim Rewards</Button>\n                        {/* <div className=\"\" style={{ color: 'white', fontSize: '15px' }}>Copy Address</div>\n                        <Button\n                          onClick={() => navigator.clipboard.writeText('0x8303396EA8b5419E187950Ce609ea1F610289912')}\n                          style={{ color: 'white', fontSize: '12px', backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className=\"mb-3\">\n                          OSIS Token\n                        </Button> */}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row px-4 pt-2\">\n                  <div className=\"header\">\n                    <div className='col bg-black'></div>\n                    <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: \"300\" }}>Staking Pool Active Rewards</div>\n                    <h1>\n                    </h1>\n                    <table style={{ boxShadow: \"1px 1px 15px #4ac0e7\" }} className='table px-3 table-bordered table-dark' >\n                      <thead className='thead-light'>\n                        <tr>\n                          <th scope=\"col\">Collection</th>\n                          <th scope=\"col\">Rewards Per Day</th>\n                          {/* <th scope=\"col\">Exchangeable Items</th> */}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Standard MetaBadge</td>\n                          <td className=\"amount\" data-test-id=\"rewards-summary-ads\">\n                            <span className=\"amount\">1</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td>\n                          {/* <td className=\"exchange\">\n                            <span className=\"amount\">2</span>&nbsp;<span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                        <tr className='stakegoldeffect'>\n                          <td>Rare / Super Rare MetaBadge</td>\n                          <td className=\"amount \" data-test-id=\"rewards-summary-ac\">\n                            <span className=\"amount\">2</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td>\n                          {/* <td className=\"exchange\"><span className=\"amount\">10</span>&nbsp;<span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                        <tr>\n                          {/* <td>Super Rare MetaBadge</td>\n                          <td className=\"amount\" data-test-id=\"rewards-summary-one-time\"><span className=\"amount\">2</span>&nbsp;<span className=\"currency\">OSIS</span>\n                          </td> */}\n                          {/* <td className=\"exchange\">\n                            <span className=\"amount\">TBD or </span>\n                            <span className=\"currency\">TBD</span>\n                          </td> */}\n                        </tr>\n                      </tbody>\n                    </table>\n                    <a href=\"/OSIS_Gear_Deck.pdf\" target=\"_blank\" rel=\"noreferrer\"\n                      className=\"'mb-3 mt-3 bg-black'\"\n                      style={{ backgroundColor: \"#000000\", boxShadow: \"0px 0px 0px #4ac0e7\", fontWeight: \"300\", fontSize: '20px', color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>\n                      OSIS Rewards List\n                    </a>\n                    {/* <div className=\"header\"> */}\n                    {/* <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: '300' }}>OSIS Token Stake Farms</div> */}\n                    {/* <h1> */}\n                    {/* </h1> */}\n                    {/* <table className='table table-bordered table-dark' style={{ borderRadius: '14px', boxShadow: \"1px 1px 15px #4ac0e7\" }} > */}\n                    {/* <thead className='thead-light'> */}\n                    {/* <tr> */}\n                    {/* <td>OSIS Staking Farm Pools</td> */}\n                    {/* <td>Harvest Daily Earnings</td> */}\n                    {/* </tr> */}\n                    {/* </thead> */}\n                    {/* <tbody> */}\n                    {/* <tr> */}\n                    {/* <td>Stake OSIS to Earn OSIS</td> */}\n                    {/* <td className=\"amount\" data-test-id=\"rewards-summary-ads\"> */}\n                    {/* <span className=\"amount\">0.001</span>&nbsp;<span className=\"currency\">Per Staked OSIS</span> */}\n                    {/* </td> */}\n                    {/* </tr> */}\n                    {/* <tr>\n                            <td>Stake OSIS to Earn OSIS+</td>\n                            <td className=\"amount\" data-test-id=\"rewards-summary-ac\">\n                              <span className=\"amount\">0.005</span>&nbsp;<span className=\"currency\">Per OSIS</span>\n                            </td>\n                          </tr> */}\n                    {/* </tbody> */}\n                    {/* </table> */}\n                    {/* </div> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='col mt-3 bg-black' id=\"NFT\">\n            <div className='col bg-black'>\n              <h1 className=' mb-3 mt-5 bg-black'>MetaBadge Portal</h1>\n              <div className='col mt-3 ml-3 bg-black'>\n                <img src=\"polygon.png\" width={'15%'} height=\"\" alt=\"\" ></img>\n              </div>\n              {/* <h1 className='mbgtitlestyle mb-3 mt-3 bg-black'>Your NFT Portal</h1> */}\n              {/* <Button onClick={refreshPage} style={{ backgroundColor: \"#000000\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>Refresh NFT Portal</Button> */}\n            </div>\n            <div className='col mt-3 mr-5 bg-black'>\n              {/* <img src=\"./ethereum.png\" width={'20%'}></img> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react'\nimport 'sf-font';\nimport axios from 'axios';\nimport VAULTABI from './VAULTABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\n// import WalletConnectProvider from \"@walletconnect/web3-provider\";\n// import WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\n\nvar web3 = null;\nvar account = null;\nvar vaultcontract = null;\nvar provider = null;\nconst gasOptions = { gasPrice: 150000000000, gasLimit: 500000 };\n\nconst moralisapikey = \"JwcyI3kFcZIx9M9Psom0b0d2ahdb9VxmSs80MnYU43bbwX803Jufh0XzqYKbXzyg\";\nconst providerOptions = {\n    // binancechainwallet: {\n    //     package: true\n    // },\n    // walletconnect: {\n    //     package: WalletConnectProvider,\n    //     options: {\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //     },\n    // },\n    // walletlink: {\n    //     package: WalletLink,\n    //     options: {\n    //         appName: \"OSIS Staking dAPP\",\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //         rpc: \"https://polygon-mainnet.public.blastapi.io\",\n    //         chainId: 137,\n    //         appLogoUrl: null,\n    //         darkMode: true\n    //     }\n    // },\n};\n\nconst web3Modal = new Web3Modal({\n    network: \"mainnet\",\n    theme: \"dark\",\n    cacheProvider: false,\n    providerOptions\n});\n\nfunction sleep(ms) {return new Promise((resolve) => setTimeout(resolve, ms));}\n\n\nexport default function NFT() {\n    const [apicall, getNfts] = useState([])\n    const [nftstk, getStk] = useState([])\n    const [loadingState, setLoadingState] = useState('not-loaded')\n    const [stakeLoading, setStakeLoading] = useState({});\n    const [unstakeLoading, setUnstakeLoading] = useState({});\n\n    useEffect(() => {\n        callApi()\n    }, []);\n\n    const switchNetwork = async (chainId) => {\n        if (![137, '0x89', '137'].includes(chainId)) {\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: '0x89' }],\n                });\n                await callApi();\n                return { msg: 'Change Network Successfull' };\n            } catch (e) {\n               console.log('error switchNetwork', e);\n            }\n        }\n    }\n\n    async function getNextNftPage(cursor) {\n        let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n        return await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal&limit=100&cursor=${cursor}`), { headers: config });\n    }\n\n    async function callApi() {\n        provider = await web3Modal.connect();\n        provider.on('chainChanged', switchNetwork);\n        web3 = new Web3(provider);\n        await provider.request({ method: 'eth_requestAccounts' });\n        var accounts = await web3.eth.requestAccounts();\n        account = accounts[0];\n        switchNetwork(provider.chainId);\n        vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT)\n        let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n        const nftsRes = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal&limit=100`), { headers: config });\n       // .then(output => {\n        //     console.log('output data: ', output.data);\n        //     const { result } = output.data\n            // return result;\n        // })\n\n\n        const nfts = nftsRes.data.result;\n        console.log(\"nfts res: \", nfts);\n\n        let cursor = nftsRes.data.cursor;\n        const numLoop = Math.floor(nftsRes.data.total / nftsRes.data.page_size);\n        console.log(\"num loop: \", numLoop);\n        for (let x = 0; x < numLoop - 1; x++) {\n            await sleep(100);\n            // await new Promise(r => { \n            //     const t = setTimeout(r, 400); \n            //     // clearTimeout(t);\n            // });\n            const nextPageRes = await getNextNftPage(cursor);\n            console.log(`Page[${x}]: `, nextPageRes.data.result);\n            cursor = nextPageRes.data.cursor;\n            // nfts.concat(nextPageRes.data.result);\n            nextPageRes.data.result.forEach((e) => {\n                nfts.push(e);\n            });\n        }\n\n        console.log(\"all 10000, nft: \", nfts.length);\n\n        const apicall = await Promise.all(nfts.map(async i => {\n            let item = {\n                tokenId: i.token_id,\n                holder: i.owner_of,\n                wallet: account,\n            }\n            return item\n        }))\n        const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\n            .then(id => {\n                return id;\n            })\n        const nftstk = await Promise.all(stakednfts.map(async i => {\n            let stkid = {\n                tokenId: i,\n            }\n            return stkid\n        }))\n        getNfts(apicall)\n        getStk(nftstk)\n        console.log(apicall);\n        console.log(nftstk) \n        setLoadingState('loaded')\n    }\n    console.log('check', { loadingState, apicall, nftstk });\n    if (loadingState === 'loaded' && !apicall.length) {\n        return (<h1 className=\"text-3xl\">Wallet Not Connected</h1>)\n    }\n\n    console.log({ stakeLoading, unstakeLoading })\n\n    return (\n        <div className='container mb-4 bg-black'>\n            <div className=\"container nftportal bg-black\">\n                <div className=\"row items px-5 pt-1\">\n                    <div className=\"mb-3 mt-3 bg-black\">\n                        <div className=\"row\">\n                            <h3 className=\"center progress-title\">Manifesting...</h3>\n                            <div className=\"progress progress-striped\">\n                                <div className=\"progress-bar\"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"ml-3 mr-3 bg-black\" style={{ display: \"inline-grid\", gridColumnEnd: \"auto\", gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\", columnGap: \"10px\" }}>\n                        {apicall.map((nft, i) => {\n                            const owner = nft.wallet.toLowerCase();\n                            const holder = nft.holder.toLowerCase();\n                            if (owner.indexOf(holder) !== -1) {\n                                async function stakeit() {\n                                    setStakeLoading({ [i]: true });\n                                    await vaultcontract.methods.stake([nft.tokenId]).send({ from: account, ...gasOptions });\n                                    setTimeout(async () => {\n                                        await callApi();\n                                        setStakeLoading({ [i]: false });\n                                    }, 22000);\n                                }\n                                return (\n                                    <div className=\"card nft-card mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges<br></br> #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#6db647\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>{stakeLoading[i] ? 'Staking...' : 'Stake it'}</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        })}\n                        {nftstk.map((nft, i) => {\n                            async function unstakeit() {\n                                setUnstakeLoading({ [i]: true });\n                                vaultcontract.methods.unstake([nft.tokenId]).send({ from: account, ...gasOptions });\n                                setTimeout(async () => {\n                                    await callApi();\n                                    setUnstakeLoading({ [i]: false });\n                                }, 22000);\n                            }\n                            return (\n                                <div key={i}>\n                                    <div className=\"card stakedcard mt-3 mb-3\" >\n                                        <div className=\"image-over\">\n                                            <img style={{ position: 'absolute', top: '0.05rem', width: '50px' }} src='metabadges.png' width=\"\" height=\"\" alt=\"\" ></img>\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges<br></br> #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit}>{unstakeLoading[i] ? 'Unstaking...' : 'Unstake it'}</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}