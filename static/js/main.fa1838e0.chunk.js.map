{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","account","contract","vaultcontract","web3","Web3Alc","web3Modal","Web3Modal","network","theme","cacheProvider","providerOptions","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","headers","outputb","result","nftdata","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","Promise","resolve","setTimeout","connect","provider","Web3","request","method","eth","requestAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","String","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","setApprovalForAll","send","rawnfts","getMaxPriorityFeePerGas","tip","getBlock","block","baseFee","baseFeePerGas","maxPriority","maxFee","claim","maxFeePerGas","maxPriorityFeePerGas","unstake","class","className","src","width","height","alt","href","rel","type","onClick","style","fontWeight","color","fontFamily","textShadow","htmlFor","borderRadius","fontSize","Button","backgroundColor","boxShadow","marginTop","scope","window","location","reload","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapikey","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","output","nfts","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","useEffect","callApi","length","display","gridColumnEnd","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","stake","marginLeft","position","top","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.fa1838e0.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\nexport const NFTCONTRACT = \"0xA690c89558a39709e1F0DdE0f8825a83d438fcE4\";\nexport const STAKINGCONTRACT = \"0xf10641F04319F657f4A085d26599CB1f0e76874f\";\nexport const polygonscanapi = \"https://api.polygonscan.com/api\";\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2\";\nexport const nftpng = \"https://ipfs.io/ipfs/QmZnG7o3UTe35xq3ffJMtApKXnY2d2Ccxwjxny3HPvop1S/\";\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/es1OESDzahjFzl7I2jMj9F24Ea3vMo3u\");\n\n\n\n// export const polygonscanapi = \"https://api.polygonscan.com/api\";","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\nimport TOKENABI from './TOKENABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-mainnet.g.alchemy.com/v2/W3CAcUSVv-z7zxqoiF3coq_6wUAXcsl8\");\n\nconst moralisapikey = \"rmo6dN3ukVlyFvERnzAQkjxYW3DQUO4dZIkLgQKvPKdCZ8ZQ3gAzdcnhbT3L5WGI\";\nconst polygonscanapikey = \"JAR6HQQDTVZ3UQIHCUFHJ7MV2M5E6V2FFE\";\n\nconst providerOptions = {\n  // binancechainwallet: {\n  //   package: true\n  // },\n  // walletconnect: {\n  //   package: WalletConnectProvider,\n  //   options: {\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\"\n  //   }\n  // },\n  // walletlink: {\n  //   package: WalletLink,\n  //   options: {\n  //     appName: \"MBG Staking dAPP\",\n  //     infuraId: \"e3596064a2434b66b3497af106f27886\",\n  //     rpc: \"https://polygon-mainnet.public.blastapi.io\",\n  //     chainId: 137,\n  //     appLogoUrl: null,\n  //     darkMode: true\n  //   }\n  // },\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\",\n  theme: \"dark\",\n  cacheProvider: false,\n  providerOptions\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      balance: [],\n      rawearn: [],\n    };\n  }\n\n  handleModal() {\n    this.setState({ show:!this.state.show })\n  }\n\n  handleNFT(nftamount) {\n    this.setState({ outvalue: nftamount.target.value });\n  }\n\n  async componentDidMount() {\n\n    await axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n      .then(outputa => {\n        this.setState({\n          balance: outputa.data\n        })\n        console.log(outputa.data)\n      })\n    let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n    await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n      .then(outputb => {\n        const { result } = outputb.data\n        this.setState({\n          nftdata: result\n        })\n        console.log(outputb.data)\n      })\n  }\n\n\n  render() {\n    const { balance } = this.state;\n    const { outvalue } = this.state;\n\n\n    const sleep = (milliseconds) => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n    const expectedBlockTime = 10000;\n\n    async function connectwallet() {\n      var provider = await web3Modal.connect();\n      web3 = new Web3(provider);\n      await provider.request({ method:'eth_requestAccounts'});\n      // await provider.send('eth_requestAccounts');\n      var accounts = await web3.eth.requestAccounts();\n      account = accounts[0];\n      document.getElementById('wallet-address').textContent = account;\n      contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n\n\n      vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n\n    \n\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      \n\n\n      \n\n\n      \n      const arraynft = Array.from(getstakednfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        console.log(array);\n        array.forEach(async (item) => {\n          var earned = String(item).split(\",\")[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          console.log(numrwd);\n          rwdArray.push(numrwd);\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n\n    async function verify() {\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      console.log(getstakednfts);\n    }\n\n    async function enable() {\n      contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n    }\n    async function rewardinfo() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        array.forEach(async (item) => {\n          var earned = String(item).split(\",\")[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          rwdArray.push(numrwd)\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n    async function claimit() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.claim([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function unstakeall() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.unstake([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function mintnative() {\n      var _mintAmount = Number(outvalue);\n      var mintRate = Number(await contract.methods.cost().call());\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = baseFee + maxPriority\n          contract.methods.mint(account, _mintAmount)\n            .send({\n              from: account,\n              value: String(totalAmount),\n              maxFeePerGas: maxFee,\n              maxPriorityFeePerGas: maxPriority\n            });\n        });\n      })\n    }\n\n    async function mint0() {\n      var _pid = \"0\";\n      var erc20address = await contract.methods.getCryptotoken(_pid).call();\n      var currency = new web3.eth.Contract(TOKENABI, erc20address);\n      var mintRate = await contract.methods.getNFTCost(_pid).call();\n      var _mintAmount = Number(outvalue);\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          currency.methods.approve(NFTCONTRACT, String(totalAmount))\n            .send({\n              from: account\n            })\n            .then(currency.methods.transfer(NFTCONTRACT, String(totalAmount))\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              },\n                async function (error, transactionHash) {\n                  console.log(\"Transfer Submitted, Hash: \", transactionHash)\n                  let transactionReceipt = null\n                  while (transactionReceipt == null) {\n                    transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash);\n                    await sleep(expectedBlockTime)\n                  }\n                  window.console = {\n                    log: function (str) {\n                      var out = document.createElement(\"div\");\n                      out.appendChild(document.createTextNode(str));\n                      document.getElementById(\"txout\").appendChild(out);\n                    }\n                  }\n                  console.log(\"Transfer Complete\", transactionReceipt);\n                  contract.methods.mintpid(account, _mintAmount, _pid)\n                    .send({\n                      from: account,\n                      maxFeePerGas: maxFee,\n                      maxPriorityFeePerGas: maxPriority\n                    });\n                }));\n        });\n      });\n    }\n    const refreshPage = () => {\n      window.location.reload();\n    }\n\n    return (\n      <body class=\"container py-2 bg-black\">\n        <div className=\"App nftapp bg-black\">\n\n          <nav class=\"container py-3 bg-black\">\n            <div class=\"container d-flex align-content-center flex-wrap bg-black\"> <img src=\"apotheosis.png\" width=\"\" height=\"38\" class=\"d-inline-block align-top\" alt=\"\"></img> \n              <ul class=\"nav me-auto align-content-right bg-black\">\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2 active\" aria-current=\"page\">Dashboard</a></li>\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">List</a></li>\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">NFTs</a></li>\n                {/* <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">Bridge</a></li> */}\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world\" target=\"_blank\" rel=\"noreferrer\" class=\"nav-link link-light px-2\">OSIS</a></li>\n              </ul>\n              <ul class=\"nav\">\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\" class=\"nav-link link-light px-3\">GET OSIS</a></li>\n                <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{class: \"nav-item d-flex align-content-center flex-wrap\"}} value=\"Connect Your Wallet\" />\n                {/* <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\" class=\"nav-link link-light px-3\">GET OSIS</a></li> */}\n              </ul>\n            </div>\n          </nav>\n          <div className='container, bg-black'>\n            <div className='col, py-4'>\n              <body className='nftminter'>\n                <form>\n                  <div className=\"row pt-1\">\n                    <div>\n                      <h1 className=\"pt-1\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>MetaBadge Staking Platform</h1>\n                    </div>\n                    {/* <h3>{balance.result} Minted /10000</h3> */}\n                    <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>Your Wallet Address</h6>\n                    <div className=\"pb-1\" id='wallet-address' style={{\n                      color: \"#4ac0e7\",\n                      fontWeight: \"600\",\n                      textShadow: \"1px 1px 1px black\",\n                    }}>\n                      <label htmlFor=\"floatingInput\">Please Connect Your Wallet</label>\n                    </div>\n                  </div>\n                  <div>\n                    {/* <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>Select NFT Quantity</label> */}\n                  </div>\n                  {/* <ButtonGroup size=\"lg\"\n                    aria-label=\"First group\"\n                    name=\"amount\"\n                    style={{ boxShadow: \"1px 1px 5px #4ac0e7\" }}\n                    onClick={nftamount => this.handleNFT(nftamount, \"value\")}\n                  >\n                    <Button value=\"1\">1</Button>\n                    <Button value=\"2\">2</Button>\n                    <Button value=\"3\">3</Button>\n                    <Button value=\"4\">4</Button>\n                    <Button value=\"5\">5</Button>\n                  </ButtonGroup> */}\n                  {/* <h6 className=\"pt-2\" style={{ fontFamily: \"SF Pro Display\", fontWeight: \"300\", fontSize: \"18px\" }}>Buy with your preferred crypto!</h6> */}\n                  {/* <div className=\"row px-2 pb-2 row-style\"> */}\n                  {/* <div className=\"col \"> */}\n                  {/* <Button className=\"button-style\" onClick={mint0} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src={\"n2dr-logo.png\"} width=\"100%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"usdt.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div className=\"col\"> */}\n                  {/* <Button className=\"button-style\" onClick={mintnative} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"matic.png\" width=\"70%\" />\n                      </Button> */}\n                  {/* </div> */}\n                  {/* <div> */}\n                  {/* <div id='txout' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '20px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>\n                        <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\n                      </div> */}\n                  {/* </div> */}\n                  {/* </div> */}\n                </form>\n              </body>\n            </div>\n          </div>\n          <div className='col bg-black'>\n            <body className='nftstaker border-0 bg-black'>\n              <form style={{ fontFamily: \"Avenir LT Std\" }} >\n                <h2 className=\"pt-2\" style={{ fontFamily: \"Avenir LT Std\", borderRadius: '14px', fontWeight: \"400\", color: \"#ffffff\", fontSize: \"25px\" }}>MBG Staking Vault </h2>\n                <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>First time staking?</h6>\n                <Button className=\"btn\" onClick={enable} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Authorize Your Wallet</Button>\n                <div className=\"row mt-2 px-3 pt-1\">\n                  <div className=\"col-sm-4 col-center-block\">\n                    <form class=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}>Your Vault Activity</h5>\n                      <h6 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h6>\n                      <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Verify</Button>\n                      <table className='table mt-3 mb-5 px-3 table-dark'>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Your Staked NFTs:\n                            <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Total Staked NFTs:\n                            <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'></span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Unstake All Staked NFTs <br></br>\n                            <Button onClick={unstakeall} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className='mb-3' >Unstake All</Button>\n                          </td>\n                        </tr>\n                      </table>\n                    </form>\n                  </div>\n                  <img className=\"col-sm-3 col-center-block mb-5 mb-1 pb-1\" src=\"metabadges.png\" />\n                  <div className=\"col-sm-4 col-center-block\">\n                    <form className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\", fontFamily: \"Avenir LT Std\" }}>\n                      <h5 className=\"pt-3\" style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards</h5>\n                      <div>\n                        <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                      </div>\n                      <Button onClick={rewardinfo} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Earned MBG Rewards</Button>\n                      <div>\n                        <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                      </div>\n                      <div id='earned' style={{ color: \"#6db647\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p style={{ fontSize: \"20px\" }}>Earned Tokens</p></div>\n                      <div className='col12 mt-2'>\n                        <div className=\"pt-2\" style={{ color: 'white' }}>Claim Rewards</div>\n                        <div>\n                          <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                        </div>\n                        <Button onClick={claimit} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className=\"mb-4\">Claim</Button>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <div className=\"row px-4 pt-2\">\n                  <div class=\"header\">\n                    <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: \"300\" }}>MBG NFT Staking Pool Active Rewards</div>\n                    <h1>\n                    </h1>\n                    <table style={{ boxShadow: \"1px 1px 15px #4ac0e7\" }} className='table px-3 table-bordered table-dark' >\n                      <thead className='thead-light'>\n                        <tr>\n                          <th scope=\"col\">Collection</th>\n                          <th scope=\"col\">Rewards Per Day</th>\n                          <th scope=\"col\">Exchangeable Items</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Standard MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                            <span class=\"amount\">2000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">2</span>&nbsp;<span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>Rare MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                            <span class=\"amount\">4000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\"><span class=\"amount\">10</span>&nbsp;<span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                        <tr className='stakegoldeffect'>\n                          <td>Super Rare MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-one-time\"><span class=\"amount\">4000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">TBD or </span>\n                            <span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <div class=\"header\">\n                      <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: '300' }}>MBG Token Stake Farms</div>\n                      <h1>\n                      </h1>\n                      <table className='table table-bordered table-dark' style={{ borderRadius: '14px', boxShadow: \"1px 1px 15px #4ac0e7\" }} >\n                        <thead className='thead-light'>\n                          <tr>\n                            <th scope=\"col\">Farm Pools</th>\n                            <th scope=\"col\">Harvest Daily Earnings</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>Stake MBG to Earn MBG</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                              <span class=\"amount\">0.01</span>&nbsp;<span class=\"currency\">Per MBG</span>\n                            </td>\n                          </tr>\n                          {/* <tr>\n                            <td>Stake MBG to Earn MBG+</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                              <span class=\"amount\">0.005</span>&nbsp;<span class=\"currency\">Per MBG</span>\n                            </td>\n                          </tr> */}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </body>\n          </div>\n\n          <div className='col mt-3 bg-black'>\n            <div className='col mt-3 ml-3 bg-black'>\n              <img src=\"polygon.png\" width={'20%'}></img>\n            </div>\n            <div className='col bg-black'>\n              <h1 className='n2dtitlestyle mb-3 mt-3 bg-black'>Your NFT Portal</h1>\n              <Button onClick={refreshPage} style={{ backgroundColor: \"#000000\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>Refresh NFT Portal</Button>\n            </div>\n            <div className='col mt-3 mr-5 bg-black'>\n              {/* <img src=\"./ethereum.png\" width={'20%'}></img> */}\n            </div>\n          </div>\n        </div>\n      </body>\n    )\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react'\nimport 'sf-font';\nimport axios from 'axios';\nimport VAULTABI from './VAULTABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\n\nvar web3 = null;\nvar account = null;\nvar vaultcontract = null;\n\nconst moralisapikey = \"rmo6dN3ukVlyFvERnzAQkjxYW3DQUO4dZIkLgQKvPKdCZ8ZQ3gAzdcnhbT3L5WGI\";\nconst providerOptions = {\n    // binancechainwallet: {\n    //     package: true\n    // },\n    // walletconnect: {\n    //     package: WalletConnectProvider,\n    //     options: {\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //     },\n    // },\n    // walletlink: {\n    //     package: WalletLink,\n    //     options: {\n    //         appName: \"MBG Staking dAPP\",\n    //         infuraId: \"e3596064a2434b66b3497af106f27886\",\n    //         rpc: \"https://polygon-mainnet.public.blastapi.io\",\n    //         chainId: 137,\n    //         appLogoUrl: null,\n    //         darkMode: true\n    //     }\n    // },\n};\n\nconst web3Modal = new Web3Modal({\n    network: \"mainnet\",\n    theme: \"dark\",\n    cacheProvider: false,\n    providerOptions\n});\n\nexport default function NFT() {\n    const [apicall, getNfts] = useState([])\n    const [nftstk, getStk] = useState([])\n    const [loadingState, setLoadingState] = useState('not-loaded')\n\n    useEffect(() => {\n        callApi()\n    }, [])\n\n    async function callApi() {\n        var provider = await web3Modal.connect();\n        web3 = new Web3(provider);\n      await provider.request({ method:'eth_requestAccounts'});\n    //   await provider.send('eth_requestAccounts');\n        var accounts = await web3.eth.requestAccounts();\n        account = accounts[0];\n\n        vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT)\n        let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n        const nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n            .then(output => {\n                const { result } = output.data\n                return result;\n            })\n        const apicall = await Promise.all(nfts.map(async i => {\n            let item = {\n                tokenId: i.token_id,\n                holder: i.owner_of,\n                wallet: account,\n            }\n            return item\n        }))\n        const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\n            .then(id => {\n                return id;\n            })\n        const nftstk = await Promise.all(stakednfts.map(async i => {\n            let stkid = {\n                tokenId: i,\n            }\n            return stkid\n        }))\n        getNfts(apicall)\n        getStk(nftstk)\n        console.log(apicall);\n        console.log(nftstk);\n        setLoadingState('loaded')\n    }\n    if (loadingState === 'loaded' && !apicall.length)\n        return (\n            <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\n    return (\n        <div className='container mb-4 bg-black'>\n            <div className=\"container nftportal bg-black\">\n                <div className=\"row items px-5 pt-1\">\n                    <div className=\"ml-3 mr-3 bg-black\" style={{ display: \"inline-grid\", gridColumnEnd: \"auto\", gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\", columnGap: \"10px\" }}>\n                        {apicall.map((nft, i) => {\n                            var owner = nft.wallet.toLowerCase();\n                            if (owner.indexOf(nft.holder) !== -1) {\n                                async function stakeit() {\n                                    vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\n                                }\n                                return (\n                                    <div className=\"card nft-card mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#6db647\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        })}\n                        {nftstk.map((nft, i) => {\n                            async function unstakeit() {\n                                vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\n                            }\n                            return (\n                                <div>\n\n                                    <div className=\"card stakedcard mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img style={{ position: 'absolute', top: '0.05rem', width: '50px' }} src='metabadges.png'></img>\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">OSIS MetaBadges #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit}>Unstake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}