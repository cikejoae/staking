{"version":3,"sources":["config.js","App.js","reportWebVitals.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","nftpng","createAlchemyWeb3","account","vaultcontract","web3","Web3Alc","providerOptions","binancechainwallet","package","walletconnect","WalletConnectProvider","options","infuraId","walletlink","WalletLink","appName","rpc","chainId","appLogoUrl","darkMode","web3Modal","Web3Modal","network","theme","cacheProvider","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","console","log","config","headers","outputb","result","nftdata","connectwallet","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","Promise","resolve","setTimeout","connect","provider","Web3","request","method","eth","getAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","String","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","rawnfts","getMaxPriorityFeePerGas","tip","getBlock","block","baseFee","baseFeePerGas","maxPriority","maxFee","claim","send","maxFeePerGas","maxPriorityFeePerGas","unstake","className","class","src","width","href","rel","type","onClick","style","fontWeight","color","fontFamily","textShadow","htmlFor","borderRadius","fontSize","Button","backgroundColor","boxShadow","marginTop","scope","window","location","reload","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapikey","NFT","useState","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","output","nfts","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","useEffect","callApi","length","display","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","stake","alt","marginLeft","position","top","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b31f9db0.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\nexport const NFTCONTRACT = \"0xA690c89558a39709e1F0DdE0f8825a83d438fcE4\";\nexport const STAKINGCONTRACT = \"0xECDc322fA3E72384bf02EabbEf807dB9Fa2242FF\";\nexport const polygonscanapi = \"https://api.polygonscan.com/api\";\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2\";\nexport const nftpng = \"https://ipfs.io/ipfs/QmZnG7o3UTe35xq3ffJMtApKXnY2d2Ccxwjxny3HPvop1S/\";\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/es1OESDzahjFzl7I2jMj9F24Ea3vMo3u\");\n\n\n\n// export const polygonscanapi = \"https://api.polygonscan.com/api\";","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\nimport TOKENABI from './TOKENABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-mainnet.g.alchemy.com/v2/W3CAcUSVv-z7zxqoiF3coq_6wUAXcsl8\");\n\nconst moralisapikey = \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\";\nconst polygonscanapikey = \"JAR6HQQDTVZ3UQIHCUFHJ7MV2M5E6V2FFE\";\n\nconst providerOptions = {\n  binancechainwallet: {\n    package: true\n  },\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"e3596064a2434b66b3497af106f27886\"\n    }\n  },\n  walletlink: {\n    package: WalletLink,\n    options: {\n      appName: \"MBG Staking dAPP\",\n      infuraId: \"e3596064a2434b66b3497af106f27886\",\n      rpc: \"\",\n      chainId: 137,\n      appLogoUrl: null,\n      darkMode: true\n    }\n  },\n};\n\nconst web3Modal = new Web3Modal({\n\tnetwork: \"mainnet\",\n\ttheme: \"dark\",\n\tcacheProvider: false,\n\tproviderOptions \n  });\n\n  class App extends Component {\n    constructor() {\n      super();\n      this.state = {\n        balance: [],\n        rawearn: [],\n      };\n    }\n  \n\thandleModal(){  \n\t\tthis.setState({show:!this.state.show})  \n\t} \n\n\thandleNFT(nftamount) {\n\t\tthis.setState({outvalue:nftamount.target.value});\n  \t}\n\n    async componentDidMount() {\n\n      await axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n        .then(outputa => {\n          this.setState({\n            balance: outputa.data\n          })\n          console.log(outputa.data)\n        })\n      let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n      await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n        .then(outputb => {\n          const { result } = outputb.data\n          this.setState({\n            nftdata: result\n          })\n          console.log(outputb.data)\n        })\n    }\n\n\n  render() {\n    const { balance } = this.state;\n    const { outvalue } = this.state;\n\n\n    const sleep = (milliseconds) => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n    const expectedBlockTime = 10000;\n\n    async function connectwallet() {\n      var provider = await web3Modal.connect();\n      web3 = new Web3(provider);\n      await provider.request({ method: 'eth_accounts' })\n      var accounts = await web3.eth.getAccounts();\n      account = accounts[0];\n      document.getElementById('wallet-address').textContent = account;\n      contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n      vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n      const arraynft = Array.from(getstakednfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        console.log(array);\n        array.forEach(async (item) => {\n          var earned = String(item).split(\",\")[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          console.log(numrwd);\n          rwdArray.push(numrwd);\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n  \n    async function verify() {\n      var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      document.getElementById('yournfts').textContent = getstakednfts;\n      var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n      document.getElementById('stakedbalance').textContent = getbalance;\n    }\n  \n    async function enable() {\n      contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n    }\n    async function rewardinfo() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      var rwdArray = [];\n      tokenid.forEach(async (id) => {\n        var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n        var array = Array.from(rawearn.map(Number));\n        array.forEach(async (item) => {\n          var earned = String(item).split(\",\")[0];\n          var earnedrwd = Web3.utils.fromWei(earned);\n          var rewardx = Number(earnedrwd).toFixed(2);\n          var numrwd = Number(rewardx);\n          rwdArray.push(numrwd)\n        });\n      });\n      function delay() {\n        return new Promise(resolve => setTimeout(resolve, 300));\n      }\n      async function delayedLog(item) {\n        await delay();\n        var sum = item.reduce((a, b) => a + b, 0);\n        var formatsum = Number(sum).toFixed(2);\n        document.getElementById('earned').textContent = formatsum;\n      }\n      async function processArray(rwdArray) {\n        for (const item of rwdArray) {\n          await delayedLog(item);\n        }\n      }\n      return processArray([rwdArray]);\n    }\n    async function claimit() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.claim([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function unstakeall() {\n      var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n      const arraynft = Array.from(rawnfts.map(Number));\n      const tokenid = arraynft.filter(Number);\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          tokenid.forEach(async (id) => {\n            await vaultcontract.methods.unstake([id])\n              .send({\n                from: account,\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority\n              })\n          })\n        });\n      })\n    }\n    async function mintnative() {\n      var _mintAmount = Number(outvalue);\n      var mintRate = Number(await contract.methods.cost().call());\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n          Web3Alc.eth.getBlock('pending').then((block) => {\n              var baseFee = Number(block.baseFeePerGas);\n              var maxPriority = Number(tip);\n              var maxFee = baseFee + maxPriority\n          contract.methods.mint(account, _mintAmount)\n              .send({ from: account,\n                value: String(totalAmount),\n                maxFeePerGas: maxFee,\n                maxPriorityFeePerGas: maxPriority});\n          });\n      })\n    }\n  \n    async function mint0() {\n      var _pid = \"0\";\n      var erc20address = await contract.methods.getCryptotoken(_pid).call();\n      var currency = new web3.eth.Contract(TOKENABI, erc20address);\n      var mintRate = await contract.methods.getNFTCost(_pid).call();\n      var _mintAmount = Number(outvalue);\n      var totalAmount = mintRate * _mintAmount;\n      await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n        Web3Alc.eth.getBlock('pending').then((block) => {\n          var baseFee = Number(block.baseFeePerGas);\n          var maxPriority = Number(tip);\n          var maxFee = maxPriority + baseFee;\n          currency.methods.approve(NFTCONTRACT, String(totalAmount))\n              .send({\n                from: account})\n                .then(currency.methods.transfer(NFTCONTRACT, String(totalAmount))\n                .send({\n                  from: account,\n                  maxFeePerGas: maxFee,\n                  maxPriorityFeePerGas: maxPriority\n                },\n                async function (error, transactionHash) {\n                  console.log(\"Transfer Submitted, Hash: \", transactionHash)\n                  let transactionReceipt = null\n                  while (transactionReceipt == null) {\n                    transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash);\n                    await sleep(expectedBlockTime)\n                  }\n                  window.console = {\n                    log: function (str) {\n                      var out = document.createElement(\"div\");\n                      out.appendChild(document.createTextNode(str));\n                      document.getElementById(\"txout\").appendChild(out);\n                    }\n                  }\n                  console.log(\"Transfer Complete\", transactionReceipt);\n                  contract.methods.mintpid(account, _mintAmount, _pid)\n                  .send({\n                    from: account,\n                    maxFeePerGas: maxFee,\n                    maxPriorityFeePerGas: maxPriority\n                  });\n              }));\n      });\n    });\n  }\n  const refreshPage = ()=>{\n    window.location.reload();  \n  }\n  \n    return (\n      <div className=\"App\">\n        <body>\n          <nav class=\"py-2 bg-black border-bottom navbarglow\">\n            <div class=\"container d-flex align-content-center flex-wrap\"> <img src=\"apotheosis.png\" width=\"7%\" ></img>\n              <ul class=\"nav me-auto\">\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2 active\" aria-current=\"page\">Dashboard</a></li>\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">List</a></li>\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">NFTs</a></li>\n                {/* <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">Bridge</a></li> */}\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world\" target=\"_blank\" rel=\"noreferrer\" class=\"nav-link link-light px-2\">OSIS</a></li>\n              </ul>\n              <ul class=\"nav\">\n                <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"https://osis.world/login\" target=\"_blank\" rel=\"noreferrer\" class=\"nav-link link-light px-3\">GET OSIS</a></li>\n                {/* <li class=\"nav-item d-flex align-content-center flex-wrap\"><a href=\"#\" class=\"nav-link link-light px-2\">Sign up</a></li> */}\n                <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{}} value=\"Connect Your Wallet\" />\n              </ul>\n            </div>\n          </nav>\n          <div className='container'>\n            <div className='col, py-4'>\n              <body className='nftminter'>\n                <form>\n                  <div className=\"row pt-1\">\n                    <div>\n                      <h1 className=\"pt-1\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>MetaBadge Staking Platform</h1>\n                    </div>\n                    {/* <h3>{balance.result} Minted /10000</h3> */}\n                    <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>Your Wallet Address</h6>\n                    <div className=\"pb-1\" id='wallet-address' style={{\n                      color: \"#4ac0e7\",\n                      fontWeight: \"600\",\n                      textShadow: \"1px 1px 1px black\",\n                    }}>\n                      <label htmlFor=\"floatingInput\">Please Connect Your Wallet</label>\n                    </div>\n                  </div>\n                  <div>\n                    {/* <label style={{ fontWeight: \"300\", fontSize: \"18px\" }}>Select NFT Quantity</label> */}\n                  </div>\n                  {/* <ButtonGroup size=\"lg\"\n                    aria-label=\"First group\"\n                    name=\"amount\"\n                    style={{ boxShadow: \"1px 1px 5px #4ac0e7\" }}\n                    onClick={nftamount => this.handleNFT(nftamount, \"value\")}\n                  >\n                    <Button value=\"1\">1</Button>\n                    <Button value=\"2\">2</Button>\n                    <Button value=\"3\">3</Button>\n                    <Button value=\"4\">4</Button>\n                    <Button value=\"5\">5</Button>\n                  </ButtonGroup> */}\n                  {/* <h6 className=\"pt-2\" style={{ fontFamily: \"SF Pro Display\", fontWeight: \"300\", fontSize: \"18px\" }}>Buy with your preferred crypto!</h6> */}\n                  {/* <div className=\"row px-2 pb-2 row-style\"> */}\n                    {/* <div className=\"col \"> */}\n                      {/* <Button className=\"button-style\" onClick={mint0} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src={\"n2dr-logo.png\"} width=\"100%\" />\n                      </Button> */}\n                    {/* </div> */}\n                    {/* <div className=\"col\"> */}\n                      {/* <Button className=\"button-style\" style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"usdt.png\" width=\"70%\" />\n                      </Button> */}\n                    {/* </div> */}\n                    {/* <div className=\"col\"> */}\n                      {/* <Button className=\"button-style\" onClick={mintnative} style={{ border: \"0.2px\", borderRadius: \"14px\", boxShadow: \"1px 1px 5px #4ac0e7\" }}>\n                        <img src=\"matic.png\" width=\"70%\" />\n                      </Button> */}\n                    {/* </div> */}\n                    {/* <div> */}\n                      {/* <div id='txout' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '20px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>\n                        <p style={{ fontSize: \"20px\" }}>Transfer Status</p>\n                      </div> */}\n                    {/* </div> */}\n                  {/* </div> */}\n                </form>\n              </body>\n            </div>\n          </div>\n          <div className='col'>\n            <body className='nftstaker border-1'>\n              <form style={{ fontFamily: \"Avenir LT Std\" }} >\n              <h2 className=\"pt-2\" style={{ fontFamily: \"Avenir LT Std\", borderRadius: '14px', fontWeight: \"400\", color: \"#ffffff\", fontSize: \"25px\" }}>MBG Staking Vault </h2>\n                <h6 style={{ fontWeight: \"300\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}>First time staking?</h6>\n                <Button className=\"btn\" onClick={connectwallet} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Authorize Your Wallet</Button>\n                <div className=\"row px-3 pt-1\">\n                  <div className=\"col-sm-4 col-center-block\">\n                    <form class=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}>Your Vault Activity</h5>\n                      <h6 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h6>\n                      <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Verify</Button>\n                      <table className='table mt-3 mb-5 px-3 table-dark'>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Your Staked NFTs:\n                            <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Total Staked NFTs:\n                            <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'></span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style={{ fontSize: \"19px\" }}>Unstake All Staked NFTs <br></br>\n                            <Button onClick={unstakeall} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className='mb-3' >Unstake All</Button>\n                          </td>\n                        </tr>\n                      </table>\n                    </form>\n                  </div>\n                  <img className= \"col-sm-3 col-center-block mb-5 mb-1 pb-1\" src=\"metabadges.png\" />\n                  <div className=\"col-sm-4 col-center-block\">\n                    <form className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #4ac0e7\", fontFamily: \"Avenir LT Std\" }}>\n                      <h5 className=\"pt-3\" style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards</h5>\n                      <div>\n                        <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                      </div>\n                      <Button onClick={rewardinfo} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} >Earned MBG Rewards</Button>\n                      <div>\n                      <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                    </div>\n                      <div id='earned' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p style={{ fontSize: \"20px\" }}>Earned Tokens</p></div>\n                      <div className='col12 mt-2'>\n                        <div className=\"pt-2\" style={{ color: 'white' }}>Claim Rewards</div>\n                        <div>\n                      <h1 className=\"pt-2\" style={{ fontWeight: \"30\", color: \"#ffffff\", fontFamily: \"Avenir LT Std\" }}> </h1>\n                    </div>\n                        <Button onClick={claimit} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #4ac0e7\" }} className=\"mb-4\">Claim</Button>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <div className=\"row px-4 pt-2\">\n                  <div class=\"header\">\n                    <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: \"300\" }}>MBG NFT Staking Pool Active Rewards</div>\n                    <h1>\n                    </h1>\n                    <table style={{ boxShadow: \"1px 1px 15px #4ac0e7\" }} className='table px-3 table-bordered table-dark' >\n                      <thead className='thead-light'>\n                        <tr>\n                          <th scope=\"col\">Collection</th>\n                          <th scope=\"col\">Rewards Per Day</th>\n                          <th scope=\"col\">Exchangeable Items</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Standard MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                            <span class=\"amount\">2000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">2</span>&nbsp;<span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>Rare MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                            <span class=\"amount\">4000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\"><span class=\"amount\">10</span>&nbsp;<span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                        <tr className='stakegoldeffect'>\n                          <td>Super Rare MetaBadge</td>\n                          <td class=\"amount\" data-test-id=\"rewards-summary-one-time\"><span class=\"amount\">4000</span>&nbsp;<span class=\"currency\">MBG</span>\n                          </td>\n                          <td class=\"exchange\">\n                            <span class=\"amount\">TBD or </span>\n                            <span class=\"currency\">TBD</span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <div class=\"header\">\n                      <div style={{ fontSize: '25px', borderRadius: '14px', color: \"#ffffff\", fontWeight: '300' }}>MBG Token Stake Farms</div>\n                      <h1>\n                      </h1>\n                      <table className='table table-bordered table-dark' style={{ borderRadius: '14px', boxShadow: \"1px 1px 15px #4ac0e7\" }} >\n                        <thead className='thead-light'>\n                          <tr>\n                            <th scope=\"col\">Farm Pools</th>\n                            <th scope=\"col\">Harvest Daily Earnings</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>Stake MBG to Earn MBG</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ads\">\n                              <span class=\"amount\">0.01</span>&nbsp;<span class=\"currency\">Per MBG</span>\n                            </td>\n                          </tr>\n                          {/* <tr>\n                            <td>Stake MBG to Earn MBG+</td>\n                            <td class=\"amount\" data-test-id=\"rewards-summary-ac\">\n                              <span class=\"amount\">0.005</span>&nbsp;<span class=\"currency\">Per MBG</span>\n                            </td>\n                          </tr> */}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </body>\n          </div>\n        </body>\n        <div className='row nftportal mt-3'>\n        <div className='col mt-4 ml-3'>\n        <img src=\"polygon.png\" width={'60%'}></img>\n      </div>\n      <div className='col'>\n        <h1 className='n2dtitlestyle mt-3'>Your NFT Portal</h1>\n      <Button onClick={refreshPage} style={{ backgroundColor: \"#000000\", boxShadow: \"1px 1px 15px #4ac0e7\" }}>Refresh NFT Portal</Button>\n      </div>\n      <div className='col mt-3 mr-5'>\n      <img src=\"./ethereum.png\" width={'60%'}></img>\n      </div>\n      </div>\n      </div>\n    );\n  };\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react'\nimport 'sf-font';\nimport axios from 'axios';\nimport VAULTABI from './VAULTABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport Web3 from \"web3\";\n\nvar account = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst moralisapikey = \"JwcyI3kFcZIx9M9Psom0b0d2ahdb9VxmSs80MnYU43bbwX803Jufh0XzqYKbXzyg\";\nconst providerOptions = {\n    binancechainwallet: {\n        package: true\n    },\n    walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n            infuraId: \"e3596064a2434b66b3497af106f27886\",\n        },\n    },\n    walletlink: {\n        package: WalletLink,\n        options: {\n            appName: \"MBG Staking dAPP\",\n            infuraId: \"e3596064a2434b66b3497af106f27886\",\n            rpc: \"\",\n            chainId: 137,\n            appLogoUrl: null,\n            darkMode: true\n        }\n    },\n};\n\nconst web3Modal = new Web3Modal({\n    network: \"mainnet\",\n    theme: \"dark\",\n    cacheProvider: false,\n    providerOptions\n});\n\nexport default function NFT() {\n    const [apicall, getNfts] = useState([])\n    const [nftstk, getStk] = useState([])\n    const [loadingState, setLoadingState] = useState('not-loaded')\n\n    useEffect(() => {\n        callApi()\n    }, [])\n\n    async function callApi() {\n        var provider = await web3Modal.connect();\n        web3 = new Web3(provider);\n        await provider.request({method: 'eth_requestAccounts'});\n        var accounts = await web3.eth.getAccounts();\n        account = accounts[0];\n        vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n        let config = { 'X-API-Key': moralisapikey, 'accept': 'application/json' };\n        const nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), { headers: config })\n            .then(output => {\n                const { result } = output.data\n                return result;\n            })\n        const apicall = await Promise.all(nfts.map(async i => {\n            let item = {\n                tokenId: i.token_id,\n                holder: i.owner_of,\n                wallet: account,\n            }\n            return item\n        }))\n        const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\n            .then(id => {\n                return id;\n            })\n        const nftstk = await Promise.all(stakednfts.map(async i => {\n            let stkid = {\n                tokenId: i,\n            }\n            return stkid\n        }))\n        getNfts(apicall)\n        getStk(nftstk)\n        console.log(apicall);\n        setLoadingState('loaded')\n    }\n    if (loadingState === 'loaded' && !apicall.length)\n        return (\n            <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\n    return (\n        <div className='nftportal mb-4'>\n            <div className=\"container col-lg-11\">\n                <div className=\"row items px-3 pt-3\">\n                    <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\n                        {apicall.map((nft, i) => {\n                            var owner = nft.wallet.toLowerCase();\n                            if (owner.indexOf(nft.holder) !== -1) {\n                                async function stakeit() {\n                                    vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\n                                }\n                                return (\n                                    <div className=\"card nft-card mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">MetaBadge Collection NFT #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        })}\n                        {nftstk.map((nft, i) => {\n                            async function unstakeit() {\n                                vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\n                            }\n                            return (\n                                <div>\n\n                                    <div className=\"card stakedcard mt-3 mb-3\" key={i} >\n                                        <div className=\"image-over\">\n                                            <img style={{ position: 'absolute', top: '0.05rem', width: '90px' }} src='stakeicon.png'></img>\n                                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\n                                        </div>\n                                        <div className=\"card-caption col-12 p-0\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"mb-0\">MetaBadge Collection NFT #{nft.tokenId}</h5>\n                                                <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\n                                                <div className=\"card-bottom d-flex justify-content-between\">\n                                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\n                                                    <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit}>Unstake it</Button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}